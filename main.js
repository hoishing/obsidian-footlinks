/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FootlinksPlugin
});
module.exports = __toCommonJS(main_exports);

// src/FootlinksSettingTab.ts
var import_obsidian = require("obsidian");
var FootlinksSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Footlinks seperator").setDesc("Seperates the footlinks area from main body").addText(
      (text) => text.setPlaceholder("None").setValue(this.plugin.setting.footSeperator).onChange((value) => {
        this.plugin.setting.footSeperator = value;
        this.plugin.saveData(this.plugin.setting);
        text.setValue(value);
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show icon in left side menu").addToggle((toggle) => {
      toggle.setValue(this.plugin.setting.showIcon).onChange((value) => {
        this.plugin.setting.showIcon = value;
        this.plugin.saveData(this.plugin.setting);
        new import_obsidian.Notice(
          `Reload the app to see icon ${value ? "added" : "removed"}.`
        );
      });
    });
  }
};

// src/FootlinksSetting.ts
var FootLinksSetting = class {
  // in minutes
  constructor() {
    this.footSeperator = "";
    this.showIcon = true;
    this.needGlobalRefactor = false;
    this.refactorInterval = null;
  }
};

// src/main.ts
var import_obsidian2 = require("obsidian");
var import_obsidian3 = require("obsidian");
(0, import_obsidian2.addIcon)(
  "footlinks-icon",
  '<path d="M22.3680891,66 C24.5772281,66 26.3680891,67.790861 26.3680891,70 L26.3680891,80 C26.3680891,82.209139 24.5772281,84 22.3680891,84 L13,84 C10.790861,84 9,82.209139 9,80 L9,70 C9,67.790861 10.790861,66 13,66 L22.3680891,66 Z M32.2112675,76.6666667 C33.4325168,76.6666667 34.422535,77.6501662 34.422535,78.8633744 C34.422535,80.0765826 33.4325168,81.0600821 32.2112675,81.0600821 C30.9900182,81.0600821 30,80.0765826 30,78.8633744 C30,77.6501662 30.9900182,76.6666667 32.2112675,76.6666667 Z M89,71 C89.5522847,71 90,71.4477153 90,72 L90,77 C90,77.5522847 89.5522847,78 89,78 L41,78 C40.4477153,78 40,77.5522847 40,77 L40,72 C40,71.4477153 40.4477153,71 41,71 L89,71 Z M32.2112675,68 C33.4325168,68 34.422535,68.9834995 34.422535,70.1967077 C34.422535,71.4099159 33.4325168,72.3934154 32.2112675,72.3934154 C30.9900182,72.3934154 30,71.4099159 30,70.1967077 C30,68.9834995 30.9900182,68 32.2112675,68 Z M22.3680891,41 C24.5772281,41 26.3680891,42.790861 26.3680891,45 L26.3680891,55 C26.3680891,57.209139 24.5772281,59 22.3680891,59 L13,59 C10.790861,59 9,57.209139 9,55 L9,45 C9,42.790861 10.790861,41 13,41 L22.3680891,41 Z M32.2112675,51.6666667 C33.4325168,51.6666667 34.422535,52.6501662 34.422535,53.8633744 C34.422535,55.0765826 33.4325168,56.0600821 32.2112675,56.0600821 C30.9900182,56.0600821 30,55.0765826 30,53.8633744 C30,52.6501662 30.9900182,51.6666667 32.2112675,51.6666667 Z M89,46 C89.5522847,46 90,46.4477153 90,47 L90,52 C90,52.5522847 89.5522847,53 89,53 L41,53 C40.4477153,53 40,52.5522847 40,52 L40,47 C40,46.4477153 40.4477153,46 41,46 L89,46 Z M32.2112675,43 C33.4325168,43 34.422535,43.9834995 34.422535,45.1967077 C34.422535,46.4099159 33.4325168,47.3934154 32.2112675,47.3934154 C30.9900182,47.3934154 30,46.4099159 30,45.1967077 C30,43.9834995 30.9900182,43 32.2112675,43 Z M22.3680891,16 C24.5772281,16 26.3680891,17.790861 26.3680891,20 L26.3680891,30 C26.3680891,32.209139 24.5772281,34 22.3680891,34 L13,34 C10.790861,34 9,32.209139 9,30 L9,20 C9,17.790861 10.790861,16 13,16 L22.3680891,16 Z M32.2112675,26.6666667 C33.4325168,26.6666667 34.422535,27.6501662 34.422535,28.8633744 C34.422535,30.0765826 33.4325168,31.0600821 32.2112675,31.0600821 C30.9900182,31.0600821 30,30.0765826 30,28.8633744 C30,27.6501662 30.9900182,26.6666667 32.2112675,26.6666667 Z M89,21 C89.5522847,21 90,21.4477153 90,22 L90,27 C90,27.5522847 89.5522847,28 89,28 L41,28 C40.4477153,28 40,27.5522847 40,27 L40,22 C40,21.4477153 40.4477153,21 41,21 L89,21 Z M32.2112675,18 C33.4325168,18 34.422535,18.9834995 34.422535,20.1967077 C34.422535,21.4099159 33.4325168,22.3934154 32.2112675,22.3934154 C30.9900182,22.3934154 30,21.4099159 30,20.1967077 C30,18.9834995 30.9900182,18 32.2112675,18 Z" fill="currentColor"></path>'
);
var FootlinksPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.extractedLinks = [];
  }
  async onload() {
    this.setting = new FootLinksSetting();
    await this.loadSetting();
    if (this.setting.showIcon) {
      this.addRibbonIcon("footlinks-icon", "Footlinks", () => {
        this.generateFootlinks();
      });
    }
    this.addCommand({
      id: "footlinks-current-shortcut",
      name: "Refactor current page",
      callback: () => this.generateFootlinks()
    });
    this.addSettingTab(new FootlinksSettingTab(this.app, this));
  }
  async loadSetting() {
    const loadedSetting = await this.loadData();
    if (loadedSetting) {
      this.setting.footSeperator = loadedSetting.footSeperator;
      this.setting.needGlobalRefactor = loadedSetting.needGlobalRefactor;
      this.setting.refactorInterval = loadedSetting.refactorInterval;
      this.setting.showIcon = loadedSetting.showIcon;
    } else {
      this.saveData(this.setting);
    }
  }
  generateFootlinks() {
    var _a;
    this.re = /\[([^\[\]]+?)\]\((https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%\._\+~#=]{1,256}\.[a-zA-Z0-9\(\)]{1,6}?(?:\/(.*?(\(.*?\))*.*?)*?(\.\w{1,6})?)*?)\)/gi;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!view) {
      new import_obsidian2.Notice("No active markdown view found.");
      return;
    }
    const source = view.editor;
    const sourceContent = source.getValue();
    this.seperator = this.makeSeperator(sourceContent);
    const extractedLinks = (_a = this.extractLinks(sourceContent)) != null ? _a : null;
    if (extractedLinks) {
      const newContent = this.refactorContent(sourceContent, extractedLinks);
      source.setValue(newContent);
    }
  }
  extractLinks(text) {
    const extractedLinks = [];
    if (text) {
      let match = this.re.exec(text);
      if (!match) {
        new import_obsidian2.Notice("No legal links found on this page.");
        return;
      }
      while (match !== null) {
        extractedLinks.push({ text: match[1], url: match[2] });
        match = this.re.exec(text);
      }
      return extractedLinks;
    }
    new import_obsidian2.Notice("This page is still empty.");
  }
  refactorContent(content, links) {
    const footlinks = this.formatLinks(links);
    let newContent = content.replace(this.re, "[$1]").trimEnd().replace(/\] ?\[/g, "]  [");
    newContent += footlinks;
    return newContent;
  }
  formatLinks(links) {
    let footlinks = "";
    let linkTexts = links.map((link) => `[${link.text}]: ${link.url}
`);
    linkTexts = linkTexts.filter((text, pos) => {
      return linkTexts.indexOf(text) === pos;
    });
    footlinks = linkTexts.reduce(
      (prev, current) => prev + current,
      this.seperator
    );
    return footlinks;
  }
  makeSeperator(content) {
    const footlinkRegx = /\[.*?\]: /g;
    return content.match(footlinkRegx) ? "\n" : `

${this.setting.footSeperator}

`;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL0Zvb3RsaW5rc1NldHRpbmdUYWIudHMiLCAic3JjL0Zvb3RsaW5rc1NldHRpbmcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBGb290bGlua3NTZXR0aW5nVGFiIGZyb20gXCIuL0Zvb3RsaW5rc1NldHRpbmdUYWJcIjtcbmltcG9ydCBGb290bGlua3NTZXR0aW5nIGZyb20gXCIuL0Zvb3RsaW5rc1NldHRpbmdcIjtcbmltcG9ydCB7IFBsdWdpbiwgTm90aWNlLCBhZGRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBNYXJrZG93blZpZXcgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuaW50ZXJmYWNlIE1hcmtkb3duTGluayB7XG4gIHRleHQ6IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmFkZEljb24oXG4gIFwiZm9vdGxpbmtzLWljb25cIixcbiAgJzxwYXRoIGQ9XCJNMjIuMzY4MDg5MSw2NiBDMjQuNTc3MjI4MSw2NiAyNi4zNjgwODkxLDY3Ljc5MDg2MSAyNi4zNjgwODkxLDcwIEwyNi4zNjgwODkxLDgwIEMyNi4zNjgwODkxLDgyLjIwOTEzOSAyNC41NzcyMjgxLDg0IDIyLjM2ODA4OTEsODQgTDEzLDg0IEMxMC43OTA4NjEsODQgOSw4Mi4yMDkxMzkgOSw4MCBMOSw3MCBDOSw2Ny43OTA4NjEgMTAuNzkwODYxLDY2IDEzLDY2IEwyMi4zNjgwODkxLDY2IFogTTMyLjIxMTI2NzUsNzYuNjY2NjY2NyBDMzMuNDMyNTE2OCw3Ni42NjY2NjY3IDM0LjQyMjUzNSw3Ny42NTAxNjYyIDM0LjQyMjUzNSw3OC44NjMzNzQ0IEMzNC40MjI1MzUsODAuMDc2NTgyNiAzMy40MzI1MTY4LDgxLjA2MDA4MjEgMzIuMjExMjY3NSw4MS4wNjAwODIxIEMzMC45OTAwMTgyLDgxLjA2MDA4MjEgMzAsODAuMDc2NTgyNiAzMCw3OC44NjMzNzQ0IEMzMCw3Ny42NTAxNjYyIDMwLjk5MDAxODIsNzYuNjY2NjY2NyAzMi4yMTEyNjc1LDc2LjY2NjY2NjcgWiBNODksNzEgQzg5LjU1MjI4NDcsNzEgOTAsNzEuNDQ3NzE1MyA5MCw3MiBMOTAsNzcgQzkwLDc3LjU1MjI4NDcgODkuNTUyMjg0Nyw3OCA4OSw3OCBMNDEsNzggQzQwLjQ0NzcxNTMsNzggNDAsNzcuNTUyMjg0NyA0MCw3NyBMNDAsNzIgQzQwLDcxLjQ0NzcxNTMgNDAuNDQ3NzE1Myw3MSA0MSw3MSBMODksNzEgWiBNMzIuMjExMjY3NSw2OCBDMzMuNDMyNTE2OCw2OCAzNC40MjI1MzUsNjguOTgzNDk5NSAzNC40MjI1MzUsNzAuMTk2NzA3NyBDMzQuNDIyNTM1LDcxLjQwOTkxNTkgMzMuNDMyNTE2OCw3Mi4zOTM0MTU0IDMyLjIxMTI2NzUsNzIuMzkzNDE1NCBDMzAuOTkwMDE4Miw3Mi4zOTM0MTU0IDMwLDcxLjQwOTkxNTkgMzAsNzAuMTk2NzA3NyBDMzAsNjguOTgzNDk5NSAzMC45OTAwMTgyLDY4IDMyLjIxMTI2NzUsNjggWiBNMjIuMzY4MDg5MSw0MSBDMjQuNTc3MjI4MSw0MSAyNi4zNjgwODkxLDQyLjc5MDg2MSAyNi4zNjgwODkxLDQ1IEwyNi4zNjgwODkxLDU1IEMyNi4zNjgwODkxLDU3LjIwOTEzOSAyNC41NzcyMjgxLDU5IDIyLjM2ODA4OTEsNTkgTDEzLDU5IEMxMC43OTA4NjEsNTkgOSw1Ny4yMDkxMzkgOSw1NSBMOSw0NSBDOSw0Mi43OTA4NjEgMTAuNzkwODYxLDQxIDEzLDQxIEwyMi4zNjgwODkxLDQxIFogTTMyLjIxMTI2NzUsNTEuNjY2NjY2NyBDMzMuNDMyNTE2OCw1MS42NjY2NjY3IDM0LjQyMjUzNSw1Mi42NTAxNjYyIDM0LjQyMjUzNSw1My44NjMzNzQ0IEMzNC40MjI1MzUsNTUuMDc2NTgyNiAzMy40MzI1MTY4LDU2LjA2MDA4MjEgMzIuMjExMjY3NSw1Ni4wNjAwODIxIEMzMC45OTAwMTgyLDU2LjA2MDA4MjEgMzAsNTUuMDc2NTgyNiAzMCw1My44NjMzNzQ0IEMzMCw1Mi42NTAxNjYyIDMwLjk5MDAxODIsNTEuNjY2NjY2NyAzMi4yMTEyNjc1LDUxLjY2NjY2NjcgWiBNODksNDYgQzg5LjU1MjI4NDcsNDYgOTAsNDYuNDQ3NzE1MyA5MCw0NyBMOTAsNTIgQzkwLDUyLjU1MjI4NDcgODkuNTUyMjg0Nyw1MyA4OSw1MyBMNDEsNTMgQzQwLjQ0NzcxNTMsNTMgNDAsNTIuNTUyMjg0NyA0MCw1MiBMNDAsNDcgQzQwLDQ2LjQ0NzcxNTMgNDAuNDQ3NzE1Myw0NiA0MSw0NiBMODksNDYgWiBNMzIuMjExMjY3NSw0MyBDMzMuNDMyNTE2OCw0MyAzNC40MjI1MzUsNDMuOTgzNDk5NSAzNC40MjI1MzUsNDUuMTk2NzA3NyBDMzQuNDIyNTM1LDQ2LjQwOTkxNTkgMzMuNDMyNTE2OCw0Ny4zOTM0MTU0IDMyLjIxMTI2NzUsNDcuMzkzNDE1NCBDMzAuOTkwMDE4Miw0Ny4zOTM0MTU0IDMwLDQ2LjQwOTkxNTkgMzAsNDUuMTk2NzA3NyBDMzAsNDMuOTgzNDk5NSAzMC45OTAwMTgyLDQzIDMyLjIxMTI2NzUsNDMgWiBNMjIuMzY4MDg5MSwxNiBDMjQuNTc3MjI4MSwxNiAyNi4zNjgwODkxLDE3Ljc5MDg2MSAyNi4zNjgwODkxLDIwIEwyNi4zNjgwODkxLDMwIEMyNi4zNjgwODkxLDMyLjIwOTEzOSAyNC41NzcyMjgxLDM0IDIyLjM2ODA4OTEsMzQgTDEzLDM0IEMxMC43OTA4NjEsMzQgOSwzMi4yMDkxMzkgOSwzMCBMOSwyMCBDOSwxNy43OTA4NjEgMTAuNzkwODYxLDE2IDEzLDE2IEwyMi4zNjgwODkxLDE2IFogTTMyLjIxMTI2NzUsMjYuNjY2NjY2NyBDMzMuNDMyNTE2OCwyNi42NjY2NjY3IDM0LjQyMjUzNSwyNy42NTAxNjYyIDM0LjQyMjUzNSwyOC44NjMzNzQ0IEMzNC40MjI1MzUsMzAuMDc2NTgyNiAzMy40MzI1MTY4LDMxLjA2MDA4MjEgMzIuMjExMjY3NSwzMS4wNjAwODIxIEMzMC45OTAwMTgyLDMxLjA2MDA4MjEgMzAsMzAuMDc2NTgyNiAzMCwyOC44NjMzNzQ0IEMzMCwyNy42NTAxNjYyIDMwLjk5MDAxODIsMjYuNjY2NjY2NyAzMi4yMTEyNjc1LDI2LjY2NjY2NjcgWiBNODksMjEgQzg5LjU1MjI4NDcsMjEgOTAsMjEuNDQ3NzE1MyA5MCwyMiBMOTAsMjcgQzkwLDI3LjU1MjI4NDcgODkuNTUyMjg0NywyOCA4OSwyOCBMNDEsMjggQzQwLjQ0NzcxNTMsMjggNDAsMjcuNTUyMjg0NyA0MCwyNyBMNDAsMjIgQzQwLDIxLjQ0NzcxNTMgNDAuNDQ3NzE1MywyMSA0MSwyMSBMODksMjEgWiBNMzIuMjExMjY3NSwxOCBDMzMuNDMyNTE2OCwxOCAzNC40MjI1MzUsMTguOTgzNDk5NSAzNC40MjI1MzUsMjAuMTk2NzA3NyBDMzQuNDIyNTM1LDIxLjQwOTkxNTkgMzMuNDMyNTE2OCwyMi4zOTM0MTU0IDMyLjIxMTI2NzUsMjIuMzkzNDE1NCBDMzAuOTkwMDE4MiwyMi4zOTM0MTU0IDMwLDIxLjQwOTkxNTkgMzAsMjAuMTk2NzA3NyBDMzAsMTguOTgzNDk5NSAzMC45OTAwMTgyLDE4IDMyLjIxMTI2NzUsMTggWlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48L3BhdGg+Jyxcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RsaW5rc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHB1YmxpYyBzZXR0aW5nOiBGb290bGlua3NTZXR0aW5nO1xuICBwdWJsaWMgZXh0cmFjdGVkTGlua3M6IEFycmF5PE1hcmtkb3duTGluaz4gPSBbXTtcbiAgcHVibGljIHJlOiBSZWdFeHA7XG4gIHB1YmxpYyBzZXBlcmF0b3I6IHN0cmluZztcblxuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgdGhpcy5zZXR0aW5nID0gbmV3IEZvb3RsaW5rc1NldHRpbmcoKTtcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5nKCk7XG4gICAgaWYgKHRoaXMuc2V0dGluZy5zaG93SWNvbikge1xuICAgICAgdGhpcy5hZGRSaWJib25JY29uKFwiZm9vdGxpbmtzLWljb25cIiwgXCJGb290bGlua3NcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmdlbmVyYXRlRm9vdGxpbmtzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwiZm9vdGxpbmtzLWN1cnJlbnQtc2hvcnRjdXRcIixcbiAgICAgIG5hbWU6IFwiUmVmYWN0b3IgY3VycmVudCBwYWdlXCIsXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5nZW5lcmF0ZUZvb3RsaW5rcygpLFxuICAgIH0pO1xuXG4gICAgLy8gdGhpcy5hZGRDb21tYW5kKHtcbiAgICAvLyBcdGlkOiBcImZvb3RsaW5rcy1nbG9iYWwtc2hvcnRjdXRcIixcbiAgICAvLyBcdG5hbWU6IFwiUmVmYWN0b3IgYWxsIHBhZ2VzXCIsXG4gICAgLy8gXHRjYWxsYmFjazogKCkgPT4gdGhpcy5nZW5lcmF0ZUZvb3RsaW5rcygpLFxuICAgIC8vIH0pO1xuXG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBGb290bGlua3NTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG4gIH1cblxuICBhc3luYyBsb2FkU2V0dGluZygpIHtcbiAgICBjb25zdCBsb2FkZWRTZXR0aW5nID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xuICAgIGlmIChsb2FkZWRTZXR0aW5nKSB7XG4gICAgICB0aGlzLnNldHRpbmcuZm9vdFNlcGVyYXRvciA9IGxvYWRlZFNldHRpbmcuZm9vdFNlcGVyYXRvcjtcbiAgICAgIHRoaXMuc2V0dGluZy5uZWVkR2xvYmFsUmVmYWN0b3IgPSBsb2FkZWRTZXR0aW5nLm5lZWRHbG9iYWxSZWZhY3RvcjtcbiAgICAgIHRoaXMuc2V0dGluZy5yZWZhY3RvckludGVydmFsID0gbG9hZGVkU2V0dGluZy5yZWZhY3RvckludGVydmFsO1xuICAgICAgdGhpcy5zZXR0aW5nLnNob3dJY29uID0gbG9hZGVkU2V0dGluZy5zaG93SWNvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmcpO1xuICAgIH1cbiAgfVxuXG4gIGdlbmVyYXRlRm9vdGxpbmtzKCkge1xuICAgIHRoaXMucmUgPVxuICAgICAgL1xcWyhbXlxcW1xcXV0rPylcXF1cXCgoaHR0cHM/OlxcL1xcLyg/Ond3d1xcLik/Wy1hLXpBLVowLTlAOiVcXC5fXFwrfiM9XXsxLDI1Nn1cXC5bYS16QS1aMC05XFwoXFwpXXsxLDZ9Pyg/OlxcLyguKj8oXFwoLio/XFwpKSouKj8pKj8oXFwuXFx3ezEsNn0pPykqPylcXCkvZ2k7XG4gICAgY29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgaWYgKCF2aWV3KSB7XG4gICAgICBuZXcgTm90aWNlKFwiTm8gYWN0aXZlIG1hcmtkb3duIHZpZXcgZm91bmQuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2UgPSB2aWV3LmVkaXRvcjtcbiAgICBjb25zdCBzb3VyY2VDb250ZW50ID0gc291cmNlLmdldFZhbHVlKCk7XG4gICAgdGhpcy5zZXBlcmF0b3IgPSB0aGlzLm1ha2VTZXBlcmF0b3Ioc291cmNlQ29udGVudCk7XG4gICAgY29uc3QgZXh0cmFjdGVkTGlua3MgPSB0aGlzLmV4dHJhY3RMaW5rcyhzb3VyY2VDb250ZW50KSA/PyBudWxsO1xuICAgIGlmIChleHRyYWN0ZWRMaW5rcykge1xuICAgICAgY29uc3QgbmV3Q29udGVudCA9IHRoaXMucmVmYWN0b3JDb250ZW50KHNvdXJjZUNvbnRlbnQsIGV4dHJhY3RlZExpbmtzKTtcbiAgICAgIHNvdXJjZS5zZXRWYWx1ZShuZXdDb250ZW50KTtcbiAgICB9XG4gIH1cblxuICBleHRyYWN0TGlua3ModGV4dDogc3RyaW5nKTogQXJyYXk8TWFya2Rvd25MaW5rPiB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgZXh0cmFjdGVkTGlua3M6IEFycmF5PE1hcmtkb3duTGluaz4gPSBbXTtcblxuICAgIGlmICh0ZXh0KSB7XG4gICAgICBsZXQgbWF0Y2ggPSB0aGlzLnJlLmV4ZWModGV4dCk7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgbmV3IE5vdGljZShcIk5vIGxlZ2FsIGxpbmtzIGZvdW5kIG9uIHRoaXMgcGFnZS5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgIGV4dHJhY3RlZExpbmtzLnB1c2goeyB0ZXh0OiBtYXRjaFsxXSwgdXJsOiBtYXRjaFsyXSB9KTtcbiAgICAgICAgbWF0Y2ggPSB0aGlzLnJlLmV4ZWModGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBleHRyYWN0ZWRMaW5rcztcbiAgICB9XG4gICAgbmV3IE5vdGljZShcIlRoaXMgcGFnZSBpcyBzdGlsbCBlbXB0eS5cIik7XG4gIH1cblxuICByZWZhY3RvckNvbnRlbnQoY29udGVudDogc3RyaW5nLCBsaW5rczogQXJyYXk8TWFya2Rvd25MaW5rPik6IHN0cmluZyB7XG4gICAgY29uc3QgZm9vdGxpbmtzID0gdGhpcy5mb3JtYXRMaW5rcyhsaW5rcyk7XG4gICAgbGV0IG5ld0NvbnRlbnQgPSBjb250ZW50XG4gICAgICAucmVwbGFjZSh0aGlzLnJlLCBcIlskMV1cIikgLy8gUmVtb3ZlIHVybHMgaW4gbWFpbiB0ZXh0XG4gICAgICAudHJpbUVuZCgpXG4gICAgICAucmVwbGFjZSgvXFxdID9cXFsvZywgXCJdICBbXCIpOyAvLyBPYnNpZGlhbiBwYXJzZXMgW3hdW3ldIGFzIGEgZm9vdG5vdGUsIHNvIHdlIGFkZCB0d28gc3BhY2VzIGluIGJldHdlZW4gdG8gZml4IGluIHRoZSBjYXNlIG9mIGFkamFjZW50IGxpbmsgdGV4dHMuXG4gICAgbmV3Q29udGVudCArPSBmb290bGlua3M7XG4gICAgcmV0dXJuIG5ld0NvbnRlbnQ7XG4gIH1cblxuICBmb3JtYXRMaW5rcyhsaW5rczogQXJyYXk8TWFya2Rvd25MaW5rPik6IHN0cmluZyB7XG4gICAgbGV0IGZvb3RsaW5rcyA9IFwiXCI7XG4gICAgbGV0IGxpbmtUZXh0cyA9IGxpbmtzLm1hcCgobGluaykgPT4gYFske2xpbmsudGV4dH1dOiAke2xpbmsudXJsfVxcbmApO1xuICAgIGxpbmtUZXh0cyA9IGxpbmtUZXh0cy5maWx0ZXIoKHRleHQsIHBvcykgPT4ge1xuICAgICAgcmV0dXJuIGxpbmtUZXh0cy5pbmRleE9mKHRleHQpID09PSBwb3M7XG4gICAgfSk7XG5cbiAgICBmb290bGlua3MgPSBsaW5rVGV4dHMucmVkdWNlKFxuICAgICAgKHByZXYsIGN1cnJlbnQpID0+IHByZXYgKyBjdXJyZW50LFxuICAgICAgdGhpcy5zZXBlcmF0b3IsXG4gICAgKTtcbiAgICByZXR1cm4gZm9vdGxpbmtzO1xuICB9XG5cbiAgbWFrZVNlcGVyYXRvcihjb250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGZvb3RsaW5rUmVneDogUmVnRXhwID0gL1xcWy4qP1xcXTogL2c7XG4gICAgcmV0dXJuIGNvbnRlbnQubWF0Y2goZm9vdGxpbmtSZWd4KVxuICAgICAgPyBcIlxcblwiXG4gICAgICA6IGBcXG5cXG4ke3RoaXMuc2V0dGluZy5mb290U2VwZXJhdG9yfVxcblxcbmA7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IEZvb3RsaW5rc1BsdWdpbiBmcm9tIFwiLi9tYWluXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RsaW5rc1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cHJpdmF0ZSByZWFkb25seSBwbHVnaW46IEZvb3RsaW5rc1BsdWdpbjtcblx0cHVibGljIHNlcGVyYXRvclNldHRpbmc6IFNldHRpbmc7XG5cdHB1YmxpYyBpY29uU2V0dGluZzogU2V0dGluZztcblx0cHVibGljIHJlZmFjdG9yU2V0dGluZzogU2V0dGluZztcblx0cHVibGljIHJlZmFjdG9ySW50ZXJ2YWxTZXR0aW5nOiBTZXR0aW5nO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEZvb3RsaW5rc1BsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0bGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJGb290bGlua3Mgc2VwZXJhdG9yXCIpXG5cdFx0XHQuc2V0RGVzYyhcIlNlcGVyYXRlcyB0aGUgZm9vdGxpbmtzIGFyZWEgZnJvbSBtYWluIGJvZHlcIilcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PlxuXHRcdFx0XHR0ZXh0XG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiTm9uZVwiKVxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5nLmZvb3RTZXBlcmF0b3IpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZy5mb290U2VwZXJhdG9yID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5nKTtcblx0XHRcdFx0XHRcdHRleHQuc2V0VmFsdWUodmFsdWUpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHQpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIlNob3cgaWNvbiBpbiBsZWZ0IHNpZGUgbWVudVwiKVxuXHRcdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG5cdFx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5nLnNob3dJY29uKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5nLnNob3dJY29uID0gdmFsdWU7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZURhdGEodGhpcy5wbHVnaW4uc2V0dGluZyk7XG5cdFx0XHRcdFx0bmV3IE5vdGljZShcblx0XHRcdFx0XHRcdGBSZWxvYWQgdGhlIGFwcCB0byBzZWUgaWNvbiAke3ZhbHVlID8gXCJhZGRlZFwiIDogXCJyZW1vdmVkXCJ9LmBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0Ly8gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0Ly8gXHQuc2V0TmFtZShcIkNob29zZSBhIGZvb3RsaW5rcyBzdHlsZVwiKVxuXHRcdC8vIFx0LmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xuXHRcdC8vIFx0XHRkcm9wZG93bi5hZGRPcHRpb24oXCJTaW5nbGUgYnJhY2tldHNcIiwgXCJ0ZXN0IGRpc3BsYXlcIik7XG5cdFx0Ly8gXHR9KTtcblx0fVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RMaW5rc1NldHRpbmcge1xuXHRwdWJsaWMgZm9vdFNlcGVyYXRvcjogc3RyaW5nO1xuXHRwdWJsaWMgc2hvd0ljb246IGJvb2xlYW47XG5cdHB1YmxpYyBuZWVkR2xvYmFsUmVmYWN0b3I6IGJvb2xlYW47XG5cdHB1YmxpYyByZWZhY3RvckludGVydmFsOiBudW1iZXIgfCBudWxsOyAvLyBpbiBtaW51dGVzXG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5mb290U2VwZXJhdG9yID0gXCJcIjtcblx0XHR0aGlzLnNob3dJY29uID0gdHJ1ZTtcblx0XHR0aGlzLm5lZWRHbG9iYWxSZWZhY3RvciA9IGZhbHNlO1xuXHRcdHRoaXMucmVmYWN0b3JJbnRlcnZhbCA9IG51bGw7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQ0FBLHNCQUF1RDtBQUd2RCxJQUFxQixzQkFBckIsY0FBaUQsaUNBQWlCO0FBQUEsRUFP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
